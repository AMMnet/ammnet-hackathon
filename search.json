[
  {
    "objectID": "posts/data-wrangle/index.html",
    "href": "posts/data-wrangle/index.html",
    "title": "Live Session 2: Introduction to Data Wrangling in R",
    "section": "",
    "text": "Take the survey!\n\n\n\nIf you are present for the live session on Monday October 21st, please click here to take the survey."
  },
  {
    "objectID": "posts/data-wrangle/index.html#introduction",
    "href": "posts/data-wrangle/index.html#introduction",
    "title": "Live Session 2: Introduction to Data Wrangling in R",
    "section": "Introduction",
    "text": "Introduction\n\nWhat do we mean with data wrangling?\nThe Cambridge dictionary gives several meanings to the verb wrangle:\n\nto argue with someone about something, especially for a long time\nto take care of, control, or move animals, especially large animals such as cows or horses (mainly American English)\nto move a person or thing somewhere, usually with difficulty or using force\nto take care of or deal with something, usually when this is difficult\n\n\n\nData Wrangling\nBy data wrangling, we mean here the process of checking and correcting quality and integrity of data relevant to malaria modeling, prior to any further analysis. This is also known as data validation.\nData validation involves checking various aspects of your dataset, such as missing values, data types, outliers, and adherence to specific rules or constraints.\nValidating our data helps maintain its quality and integrity, ensuring that any analyses or decisions made based on the data are robust and reliable.\n\n\nWhy Validate Data?\nEnsure Data Integrity: Validating data helps identify and rectify errors, ensuring the integrity of the dataset.\nImprove Analysis Accuracy: Clean and validated data leads to more accurate analysis and modeling results.\nCompliance and Standards: Data validation ensures that the data conforms to predefined rules, standards, or regulatory requirements.\nError Prevention: Early detection of errors can prevent downstream issues and save time in troubleshooting."
  },
  {
    "objectID": "posts/data-wrangle/index.html#getting-started",
    "href": "posts/data-wrangle/index.html#getting-started",
    "title": "Live Session 2: Introduction to Data Wrangling in R",
    "section": "Getting Started",
    "text": "Getting Started\nBefore you begin, you might want to create a new project in RStudio. This can be done by clicking on the “New Project” button in the upper right corner of the RStudio window. You can then name the project and choose a directory to save it in.\nNext, we will load the tidyverse package. This package provides a set of useful functions for data manipulation and visualization. We will use the ggplot2 package to create plots in the later section of this tutorial.\n\n# load packages\nlibrary(tidyverse)\n\nNext, let’s download the two example datasets we will use in this tutorial. These are available in the AMMnet Hackathon GitHub repository.\nI suggest creating a data folder inside your R project, then we can download the two example datasets so that they are saved to your computer.\n\n# Create a data folder\ndir.create(\"data\")\n\n# Download example data\nurl &lt;- \"https://raw.githubusercontent.com/AMMnet/AMMnet-Hackathon/main/02_data-wrangle/data/\"\n\ndownload.file(paste0(url, \"mockdata_cases1.csv\"), destfile = \"data/mockdata_cases1.csv\")\ndownload.file(paste0(url, \"mosq_mock1.csv\"), destfile = \"data/mosq_mock1.csv\")\n\n# Load example data\ndata_cases   &lt;- read_csv(\"data/mockdata_cases1.csv\")\nmosq_data  &lt;- read_csv(\"data/mosq_mock1.csv\")\n\nThe two datasets we will use are mockdata_cases1.csv and mosq_mock1.csv, which are mock example datasets that should be similar to malaria case surveillance and mosquito field collection data, respectively. In the following sections we will use the mockdata_cases1.csv and mosq_mock1.csv to introduce concepts of data cleaning and characterization in R."
  },
  {
    "objectID": "posts/data-wrangle/index.html#check-the-data-for-potential-errors",
    "href": "posts/data-wrangle/index.html#check-the-data-for-potential-errors",
    "title": "Live Session 2: Introduction to Data Wrangling in R",
    "section": "1. Check the data for potential errors",
    "text": "1. Check the data for potential errors\n\nPrevalence is a fraction defined in [0,1]\nNote: Prevalence of 0 or 1 while not statistically erroneous, need checking for accuracy.\nWhat observations have errors?\n\n# Erroneous values for prevalence\ndata_cases%&gt;%\n   dplyr::filter(prev &lt;= 0 | prev &gt;= 1)\n\n# A tibble: 3 × 10\n  location month  year ages  total positive xcoord ycoord    prev time_order_loc\n  &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;          &lt;dbl&gt;\n1 mordor       4  2018 15_a…    91       23  -20.0   30.5 25.3                 4\n2 neverwh…     2  2019 15_a…    22       -1  -20.8   29.6 -0.0455             14\n3 neverwh…     3  2018 unde…    25        0  -19.8   30.2  0                   3\n\n\nComment: We have two rows with nonsensical prev data 25.3and -0.455, and one row with zero prev at a given month.\n\n\nDefensive programming\nNote: The use of “::” enables us to call a function from a specific R package I have had instances where if “stats” base R package was called first, the filter function if not specified with the R package fails.\n\n# Erroneous values for prevalence\ndata_cases%&gt;%\n    stats::filter(prev &lt; 0 | prev &gt; 1) \n\n\n\nWe correct the two prevalence by re-calculating\nGood practice to leave the original data intact (advantage of R over Stata)\n\n# Update erroneous values for prevalence\ndata_prev &lt;- data_cases%&gt;%\n                       dplyr::mutate(prev_updated=positive/total)\n\nWe have a case erroneously reported with a negative value.\nWhat are your options?\n\nNever delete data\nQuery and have data management team make the necessary investigations and make a correction\n\n\ndata_prev%&gt;%\n    dplyr::filter(prev_updated &lt;= 0 | prev_updated &gt;= 1)\n\n# A tibble: 2 × 11\n  location month  year ages  total positive xcoord ycoord    prev time_order_loc\n  &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;          &lt;dbl&gt;\n1 neverwh…     2  2019 15_a…    22       -1  -20.8   29.6 -0.0455             14\n2 neverwh…     3  2018 unde…    25        0  -19.8   30.2  0                   3\n# ℹ 1 more variable: prev_updated &lt;dbl&gt;\n\n\nFor now (in order to proceed with this demo), we drop the problematic observation.\nWhy is this not working?\n\n# Filter erroneous values for prevalence, wrong way\ndata_use &lt;- data_prev%&gt;%\n              dplyr::filter (prev_updated &gt;= 0 | prev_updated &lt;= 1)\n\nWhy is this working?\n\n# Filter erroneous values for prevalence\ndata_use &lt;- data_prev%&gt;%\n             dplyr::filter (prev_updated &gt;= 0 )%&gt;%\n              dplyr::filter (prev_updated &lt;= 1)\n\ndata_use%&gt;%\n       dplyr::filter(prev_updated &lt;= 0 | prev_updated &gt;= 1)\n\n# A tibble: 1 × 11\n  location   month  year ages  total positive xcoord ycoord  prev time_order_loc\n  &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;          &lt;dbl&gt;\n1 neverwhere     3  2018 unde…    25        0  -19.8   30.2     0              3\n# ℹ 1 more variable: prev_updated &lt;dbl&gt;\n\n\n\n\nSchemas\nTo prevent nonsensical data appearing in your data, you should define a schema that comes along with your recorded data. A schema is a document that states rules for data types and values or ranges to be expected in a particular column of your data frame.\nE.g. for prevalence, we know that this should be a real number between zero and one.\nThe R package validate can be used to create a schema for your data frame:\n\n# Filter erroneous values for prevalence\nlibrary(validate)\nschema &lt;- validate::validator(prev &gt;= 0,\n                   prev &lt;= 1,\n                   positive &gt;= 0)\n\nout   &lt;- validate::confront(data_cases, schema)\nsummary(out)\n\n  name items passes fails nNA error warning             expression\n1   V1   514    513     1   0 FALSE   FALSE     prev - 0 &gt;= -1e-08\n2   V2   514    513     1   0 FALSE   FALSE      prev - 1 &lt;= 1e-08\n3   V3   514    513     1   0 FALSE   FALSE positive - 0 &gt;= -1e-08\n\n\nUsing the schema for the columns prev and positive, we could have readily detected the three problematic entries. For more details, you can have a look into the vignette of the validate package.\nNote: Next time when you receive data from your collaborators, you might want to ask them for the associated schema file (e.g. YAML format). Good luck!"
  },
  {
    "objectID": "posts/data-wrangle/index.html#look-at-summary-statistics",
    "href": "posts/data-wrangle/index.html#look-at-summary-statistics",
    "title": "Live Session 2: Introduction to Data Wrangling in R",
    "section": "2. Look at summary statistics",
    "text": "2. Look at summary statistics\n\nSummary stats by location (across all time points)\n\n# Summary statistics \n\ndata_use%&gt;%\n   dplyr::group_by(location)%&gt;%\n     dplyr::summarise(nobs=n(),\n                      mean_prev=mean(prev_updated),\n                      min_prev=min(prev_updated),\n                      max_prev=max(prev_updated))\n\n# A tibble: 5 × 5\n  location    nobs mean_prev min_prev max_prev\n  &lt;chr&gt;      &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n1 mordor       105     0.314   0.158     0.488\n2 narnia       104     0.326   0.08      0.488\n3 neverwhere    95     0.301   0         0.486\n4 oz           104     0.255   0.0714    0.459\n5 wonderland   105     0.382   0.194     0.535\n\n\n\n\nSummary stats by location and year (across all time points)\nTable getting longer. Might be too cumbersome to add checks by month and age group Note: point of query - why just had 3 measurements in 2020?\n\n# Summary statistics by location\ndata_use%&gt;%\n  dplyr::group_by(location, year)%&gt;%\n  dplyr::summarise(nobs=n(),\n                   mean_prev=mean(prev_updated),\n                   min_prev=min(prev_updated),\n                   max_prev=max(prev_updated))\n\n# A tibble: 15 × 6\n# Groups:   location [5]\n   location    year  nobs mean_prev min_prev max_prev\n   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 mordor      2018    36     0.318   0.206     0.473\n 2 mordor      2019    36     0.313   0.170     0.451\n 3 mordor      2020    33     0.312   0.158     0.488\n 4 narnia      2018    36     0.340   0.138     0.449\n 5 narnia      2019    36     0.361   0.216     0.488\n 6 narnia      2020    32     0.270   0.08      0.483\n 7 neverwhere  2018    36     0.304   0         0.45 \n 8 neverwhere  2019    56     0.298   0.0370    0.486\n 9 neverwhere  2020     3     0.307   0.04      0.473\n10 oz          2018    35     0.252   0.0714    0.459\n11 oz          2019    36     0.254   0.0861    0.446\n12 oz          2020    33     0.260   0.112     0.405\n13 wonderland  2018    36     0.365   0.255     0.454\n14 wonderland  2019    36     0.388   0.194     0.535\n15 wonderland  2020    33     0.393   0.276     0.476\n\n\n\n\n\n\n\n\nChallenge 1: Explore the data_prev and data_use datasets\n\n\n\n\nCreate a table showing the number of data entries per age group and location for each of them!\nWhich age group and location have observations removed?\n\n\n\nSlightly more advanced. Use of lists (not scope of the course but there is a point here).\n\n# Summary statistics by location\ndata_use_list &lt;- data_use%&gt;%\n                  dplyr::group_split(location)\n\nOr use the purrr library:\n\n# Summary statistics by location, map summary function\nlibrary(purrr)\n\ndata_use_age_summary &lt;- purrr::map(.x=seq(length(data_use_list)),\n                                   .f=function(x){\n                                     data_use_list[[x]]%&gt;%\n                                       dplyr::group_by(location,year,ages)%&gt;%\n                                       dplyr::summarise(nobs=n(),\n                                                        mean_prev=mean(prev_updated),\n                                                        min_prev=min(prev_updated),\n                                                        max_prev=max(prev_updated)) \n                                     \n                                   })\n\n\n\nNow let’s focus on the first list object (mordor)\nWe know pregnant mothers, children &lt;5 are most vulnerable.\nOutput (ages) isn’t ordered as we would want (chronologically).\n\n# Summary statistics by location\n\ndata_mordor &lt;- data_use_age_summary[[1]]\n\ndata_mordor\n\n# A tibble: 9 × 7\n# Groups:   location, year [3]\n  location  year ages      nobs mean_prev min_prev max_prev\n  &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;    &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n1 mordor    2018 15_above    12     0.270    0.206    0.369\n2 mordor    2018 5_to_14     12     0.335    0.219    0.427\n3 mordor    2018 under_5     12     0.348    0.259    0.473\n4 mordor    2019 15_above    12     0.266    0.170    0.377\n5 mordor    2019 5_to_14     12     0.278    0.176    0.390\n6 mordor    2019 under_5     12     0.394    0.315    0.451\n7 mordor    2020 15_above    11     0.255    0.158    0.333\n8 mordor    2020 5_to_14     11     0.352    0.258    0.488\n9 mordor    2020 under_5     11     0.330    0.190    0.422\n\n\n\n\nHow to proceed?\n\n# Summary statistics with age groups\nage_order &lt;- c(\"under_5\",\"5_to_14\",\"15_above\")\n\ndata_use_ordered &lt;- data_use\n\ndata_use_ordered$age_group &lt;- factor(data_use$ages, levels =age_order)\n\ndata_mordor_reordered &lt;- data_use_ordered%&gt;%\n                           dplyr::group_by(location, year,age_group)%&gt;%\n                            dplyr::summarise(nobs=n(),\n                                             mean_prev=mean(prev_updated),\n                                             min_prev=min(prev_updated),\n                                             max_prev=max(prev_updated))%&gt;%\n                                 dplyr::filter(location==\"mordor\")\n\nLet’s compare the two\n\n# Compare for Mordor\n\ndata_mordor\n\n# A tibble: 9 × 7\n# Groups:   location, year [3]\n  location  year ages      nobs mean_prev min_prev max_prev\n  &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;    &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n1 mordor    2018 15_above    12     0.270    0.206    0.369\n2 mordor    2018 5_to_14     12     0.335    0.219    0.427\n3 mordor    2018 under_5     12     0.348    0.259    0.473\n4 mordor    2019 15_above    12     0.266    0.170    0.377\n5 mordor    2019 5_to_14     12     0.278    0.176    0.390\n6 mordor    2019 under_5     12     0.394    0.315    0.451\n7 mordor    2020 15_above    11     0.255    0.158    0.333\n8 mordor    2020 5_to_14     11     0.352    0.258    0.488\n9 mordor    2020 under_5     11     0.330    0.190    0.422\n\ndata_mordor_reordered\n\n# A tibble: 9 × 7\n# Groups:   location, year [3]\n  location  year age_group  nobs mean_prev min_prev max_prev\n  &lt;chr&gt;    &lt;dbl&gt; &lt;fct&gt;     &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n1 mordor    2018 under_5      12     0.348    0.259    0.473\n2 mordor    2018 5_to_14      12     0.335    0.219    0.427\n3 mordor    2018 15_above     12     0.270    0.206    0.369\n4 mordor    2019 under_5      12     0.394    0.315    0.451\n5 mordor    2019 5_to_14      12     0.278    0.176    0.390\n6 mordor    2019 15_above     12     0.266    0.170    0.377\n7 mordor    2020 under_5      11     0.330    0.190    0.422\n8 mordor    2020 5_to_14      11     0.352    0.258    0.488\n9 mordor    2020 15_above     11     0.255    0.158    0.333"
  },
  {
    "objectID": "posts/data-wrangle/index.html#use-of-graphs",
    "href": "posts/data-wrangle/index.html#use-of-graphs",
    "title": "Live Session 2: Introduction to Data Wrangling in R",
    "section": "3. Use of graphs",
    "text": "3. Use of graphs\n\nWe need to assess the evolution of prevalence for all regions by month\n\n#Plotting evolution over time\nevolution_plot &lt;- ggplot2::ggplot(data=data_use_ordered,\n                                  mapping=aes(x=month,\n                                              y=prev_updated,\n                                              group=location,\n                                              colour=location))+\n                        ggplot2::geom_line(lwd=1.1)+\n                           ggplot2::facet_wrap(~year)+ \n                            ggplot2::theme_bw()+\n                             ggplot2::xlab(\"Month of the Year\")+\n                               ggplot2::ylab(\"Prevalence\")+\n                                ggplot2::scale_x_discrete(limits=factor(1:12),\n                                                          labels=c(\"J\",\"F\",\"M\",\n                                                                   \"A\",\"M\",\"J\",\n                                                                   \"J\",\"A\",\"S\",\n                                                                   \"O\",\"N\",\"D\"))+\n                                   ggplot2::scale_y_continuous(breaks=seq(from=0,\n                                                                          to=0.7,\n                                                                          by=0.1))\n\nevolution_plot\n\n\n\n\n\n\n\n\nObservation: Prevalence graph with vertical lines per month and year, means we have several subgroups for prevalence data, we plot facets for levels of age_group\n\n#Plotting evolution over time, fix 1\nevolution_plot_ages &lt;- ggplot2::ggplot(data=data_use_ordered,\n                                  mapping=aes(x=month,\n                                              y=prev_updated,\n                                              group=location,\n                                              colour=location))+\n  ggplot2::geom_line(lwd=1.1)+\n  ggplot2::facet_wrap(age_group~year)+ \n  ggplot2::theme_bw()+\n  ggplot2::xlab(\"Month of the Year\")+\n  ggplot2::ylab(\"Prevalence\")+\n  ggplot2::scale_x_discrete(limits=factor(1:12),\n                            labels=c(\"J\",\"F\",\"M\",\n                                     \"A\",\"M\",\"J\",\n                                     \"J\",\"A\",\"S\",\n                                     \"O\",\"N\",\"D\"))+\n  ggplot2::scale_y_continuous(breaks=seq(from=0,\n                                         to=0.7,\n                                         by=0.1))\n\nevolution_plot_ages\n\n\n\n\n\n\n\n\nObservation: Some improvements, but we still have vertical lines, maybe we have other group variables. Let’s only look at those rows that have more than one entry per location, month, year, age_group\n\n#Plotting evolution over time, fix 2\n\ndata_use_ordered%&gt;%\n  group_by(location,month,year,age_group)%&gt;%\n  tally()%&gt;%\n  filter(n&gt;1)%&gt;%\n  left_join(data_use_ordered)\n\n# A tibble: 48 × 13\n# Groups:   location, month, year [8]\n   location   month  year age_group     n ages     total positive xcoord ycoord\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;     &lt;int&gt; &lt;chr&gt;    &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 neverwhere     6  2019 under_5       2 under_5     24        4  -20.6   30.7\n 2 neverwhere     6  2019 under_5       2 under_5     26        1  -20.5   30.7\n 3 neverwhere     6  2019 5_to_14       2 5_to_14     27        5  -19.7   30.0\n 4 neverwhere     6  2019 5_to_14       2 5_to_14     27        8  -19.3   30.2\n 5 neverwhere     6  2019 15_above      2 15_above    70       31  -19.4   29.4\n 6 neverwhere     6  2019 15_above      2 15_above    74       27  -19.2   29.2\n 7 neverwhere     7  2019 under_5       2 under_5     25        5  -20.0   29.1\n 8 neverwhere     7  2019 under_5       2 under_5     26        4  -20.7   28.6\n 9 neverwhere     7  2019 5_to_14       2 5_to_14     27        7  -18.8   29.3\n10 neverwhere     7  2019 5_to_14       2 5_to_14     23        6  -20.4   29.8\n# ℹ 38 more rows\n# ℹ 3 more variables: prev &lt;dbl&gt;, time_order_loc &lt;dbl&gt;, prev_updated &lt;dbl&gt;\n\n\nObservation: OK, we see that within one location there are several prevalence data points, they differ by the xcoord and ycoord. In order to plot by location, we could average across xcoord and ycoord witin each location; maybe those are duplicated recordings, since xcoord and ycoord are very close?\n\n#Plotting evolution over time, fix 3\n\ndata_use_ordered%&gt;%\n  group_by(location,month,year,age_group)%&gt;%\n  summarize(prev_updated_mean=mean(prev_updated),\n            prev_updated_min=min(prev_updated),\n            prev_updated_max=max(prev_updated))%&gt;%\n  ggplot2::ggplot(mapping=aes(x=month,\n                              y=prev_updated_mean,\n                              file=location,\n                              group=location,\n                              colour=location))+\n  ggplot2::geom_line(lwd=1.1)+\n  ggplot2::facet_wrap(age_group~year)+ \n  ggplot2::theme_bw()+\n  ggplot2::xlab(\"Month of the Year\")+\n  ggplot2::ylab(\"Prevalence\")+\n  ggplot2::scale_x_discrete(limits=factor(1:12),\n                            labels=c(\"J\",\"F\",\"M\",\n                                     \"A\",\"M\",\"J\",\n                                     \"J\",\"A\",\"S\",\n                                     \"O\",\"N\",\"D\"))+\n  ggplot2::scale_y_continuous(breaks=seq(from=0,\n                                         to=0.7,\n                                         by=0.1))\n\n\n\n\n\n\n\n\nObservation: Prevalence widely variable throughout they year across the locations on average, wonderland affected by high prevalence while oz has the lowest prevalence"
  },
  {
    "objectID": "posts/data-wrangle/index.html#the-mosquito-data-set",
    "href": "posts/data-wrangle/index.html#the-mosquito-data-set",
    "title": "Live Session 2: Introduction to Data Wrangling in R",
    "section": "The mosquito data set",
    "text": "The mosquito data set\nLet’s take a look at the mosq_datadataset.\nWe check the sanity of this data set by displaying a table of recorded values per column:\n\nmosq_data %&gt;%\n  map( function(x) table(x) )\n\n$session\nx\n 1  2 \n52 52 \n\n$Village\nx\nnaernia  narnia \n      2     102 \n\n$Compound.ID\nx\n 1  2  3  4 \n26 26 26 26 \n\n$Method\nx\nALC HLC \n  1 103 \n\n$Location\nx\n Indoor Outdoor \n     52      52 \n\n$hour\nx\n01h-02h 02h-03h 03h-04h 04h-05h 05h-06h 06h-07h 07h-08h 19h-20h 20h-21h 21h-22h \n      8       8       8       8       8       8       8       8       8       8 \n22h-23h 23h-24h 24h-01h \n      8       8       8 \n\n$ag.Male\nx\n 0  3  4  5  6  7 14 16 20 22 27 35 \n93  1  1  1  1  1  1  1  1  1  1  1 \n\n$Ag.unfed\nx\n 0  1  2  3  4  5  6  7  8 10 20 \n57 13  7  8  4  4  2  4  2  1  2 \n\n$Ag.halffed\nx\n 0  3  4  5  8  9 \n92  3  3  3  1  2 \n\n$Ag.fed\nx\n 0  1  3  5 \n88  7  3  6 \n\n$Ag.grsgr\nx\n 0  1  2  3  4  6  8 12 17 20 23 27 35 37 \n70 13  6  1  2  1  3  2  1  1  1  1  1  1 \n\n$tot.gamb\nx\n 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 23 \n40 10 10  9  8  6  3  2  1  1  5  2  1  2  2  2 \n\n$Culex.male\nx\n  0 \n104 \n\n$Culex.female\nx\n 0  1  2 \n94  9  1 \n\n$Mansonia.male\nx\n  0   1 \n103   1 \n\n$Mansonia.female\nx\n 0  1  2 \n90 11  3 \n\n$Aedes.male\nx\n  0 \n104 \n\n$Aedes.female\nx\n 0  1  2 \n98  5  1 \n\n\nLooks like we have some typos in the names for Method and Village.\n\n\n\n\n\n\nChallenge 2: Using schemas for the mosquito data set\n\n\n\n\nCreate a schema that provides rules for the strings (i.e. words) to be expected in the columns Method and Village.\nUse the syntax from here\n\n\n\n\nschema &lt;- validate::validator(Method%in%c(\"HLC\"),\n                              Village%in%c(\"narnia\"))\n\nout   &lt;- validate::confront(mosq_data, schema)\nsummary(out)\n\n  name items passes fails nNA error warning                expression\n1   V1   104    103     1   0 FALSE   FALSE     Method %vin% c(\"HLC\")\n2   V2   104    102     2   0 FALSE   FALSE Village %vin% c(\"narnia\")\n\n\nThe columns Village and Method seem to have some data entry errors. We need to correct for that.\n\nmosq_data&lt;-mosq_data%&gt;%\n  mutate(Method=ifelse(Method==\"ALC\",\"HLC\",Method),\n         Village=ifelse(Village==\"naernia\",\"narnia\",Village))\n\nIt looks like the several columns concern Anopheles Gambiae population sizes. Let’s change the column names using rename from the tidyverse package.\n\nmosq_data%&gt;%\n  rename(\"AnophelesGambiae.male\"=\"ag.Male\",\n         \"AnophelesGambiae.unfed\"=\"Ag.unfed\",\n         \"AnophelesGambiae.halffed\"=\"Ag.halffed\",\n         \"AnophelesGambiae.fed\"=\"Ag.fed\",\n         \"AnophelesGambiae.gravid\"=\"Ag.grsgr\")-&gt;mosq_data\n\nSeems like the tot.gamb should count the the total number of Anopheles Gambiae populations. Let’s check:\n\nmosq_data%&gt;%\n  mutate(AnophelesGambiae_total=AnophelesGambiae.male+AnophelesGambiae.unfed+AnophelesGambiae.halffed+AnophelesGambiae.fed+AnophelesGambiae.gravid)-&gt;mosq_data\n\nmosq_data%&gt;%\n  filter(AnophelesGambiae_total!=tot.gamb)%&gt;%select(AnophelesGambiae_total,tot.gamb)\n\n# A tibble: 11 × 2\n   AnophelesGambiae_total tot.gamb\n                    &lt;dbl&gt;    &lt;dbl&gt;\n 1                     12        0\n 2                     16        2\n 3                      0        6\n 4                     24        8\n 5                     24        1\n 6                     74       12\n 7                     54        3\n 8                     70        1\n 9                     34        2\n10                     40        2\n11                     46        0\n\n\nOK, so 11 out of 104 rows have this discrepancy. Let’s keep rather Anopheles.total, since it was calculated from the data.\nSince the status of the Anopheles is mutually exclusive in the HLC data, we can draw a stacked bar chart, with the bar color defined by the status. To produce such a graph efficiently in ggplot2, we need to pivot the table.\nHere in particular we want to switch from a wide format to a long format table in order to obtain a column describing the status of the Anopheles mosquitoes. We will use in particular the names_separgument of the pivot_longer function to separate e.g. the column name AnophelesGambiae.male and use maleas level in a new column called status. The same goes for other column names.\nSetting the grouping variable to session, Village, Compound.ID, Method, Location, hour, AnophelesGambiae_total will help to keep those variables in the long format table.\n\nmosq_data%&gt;%\n  group_by(session,Village,Compound.ID,Method,Location,hour,AnophelesGambiae_total)%&gt;%\n  select(contains(\"AnophelesGambiae.\"))%&gt;%\n  pivot_longer(cols=contains(\"AnophelesGambiae.\"),names_sep=\"AnophelesGambiae.\",names_to=c(NA,\"status\"),values_to = \"AnophelesGambiae\")-&gt;mosq_data_gamb_wide\n\nmosq_data_gamb_wide%&gt;%\n  ggplot()+\n  geom_bar(aes(x=hour,y=AnophelesGambiae,fill=status),position=\"stack\",stat=\"identity\")+\n  scale_x_discrete(guide = guide_axis(angle = 60))\n\n\n\n\n\n\n\n\nObservation: We had several values for Compound.ID. The geom_bar geometry is automatically adding them up in the graph. We can use facet_wrapto see those strata:\n\nmosq_data_gamb_wide%&gt;%\n  ggplot()+\n  geom_bar(aes(x=hour,y=AnophelesGambiae,fill=status),position=\"stack\",stat=\"identity\")+\n  scale_x_discrete(guide = guide_axis(angle = 60))+\n  facet_wrap(~Compound.ID)\n\n\n\n\n\n\n\n\nOn we can also use our variable Anopheles_total and plot is as a line graph on top of the bar graph:\n\nmosq_data_gamb_wide%&gt;%\n  mutate(grouping=paste0(Compound.ID,Location,session))%&gt;%\n  ggplot()+\n  geom_bar(aes(x=hour,y=AnophelesGambiae,fill=status),position=\"stack\",stat=\"identity\")+\n  geom_line(aes(x=hour,y=AnophelesGambiae_total,group=grouping))+\n  scale_x_discrete(guide = guide_axis(angle = 60))+\n  facet_wrap(~Compound.ID+session+Location)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to AMMNet Hackathon Blog!",
    "section": "",
    "text": "Live Session 2: Introduction to Data Wrangling in R\n\n\n\n\n\n\nR\n\n\nData cleaning\n\n\nData validation\n\n\nLive session\n\n\n\n\n\n\n\n\n\nOct 14, 2024\n\n\nLazaro Mwandigha, Christian Selinger, Ellie Sherrard-Smith, Justin Millar\n\n\n\n\n\n\n\n\n\n\n\n\nLive Session 1: Introduction to Data Visualization in R\n\n\n\n\n\n\nR\n\n\nData Visualization\n\n\nggplot2\n\n\nLive session\n\n\n\n\n\n\n\n\n\nJul 19, 2024\n\n\nJustin Millar, Ellie Sherrard-Smith\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "A new virtual hackathon series for continual learning was developed by a collaborative effort between the Best Practices and Learning Committees.\nAims:\n\nTo create a continual support space that anyone can access\nTo learn how to code and how to code better\nTo upskill people from a distance, ultimately improving all our abilities in:\n\ndata handling, presentation and analysis\nexperimental design\nquantitative understanding\ncoding and problem solving\ntransmission modelling\n\nTo collaborate better and more equitably\n\nStructure:\n\nA theme is selected by the committee\nExperts sign up to support specific themed areas\nA participant submits a coding related problem for consideration within a specific theme\nExperts select 2 – 3 problems per session on the chosen theme, and prepare some solutions to present\n\nExperts will work with the Hackathon Committee for a half a day to consider the problems submitted and draft solutions. Once solutions are ready for a hackathon audience, they will present these during a 2-hour training session. Once the 2-hour training session concludes, experts will summarize the session, adapt solutions, and upload them to the shared space. A recording of the training will also be provided.\nIf you are an expert in the following topic areas, we need your help!\n\nData handling\nVisualisation \nDescriptive statistics\nPower calculations\nRegression statistics\nMechanistic modelling\nBayesian statistics\n\nWhy volunteer as an expert? The best way to learn is to teach. You’ll also have an opportunity to network and gain professional visibility within the AMMnet community.\nTo volunteer as an expert, please complete the form at the link here."
  },
  {
    "objectID": "about.html#a-virtual-hackathon-series-for-continual-learning",
    "href": "about.html#a-virtual-hackathon-series-for-continual-learning",
    "title": "About",
    "section": "",
    "text": "A new virtual hackathon series for continual learning was developed by a collaborative effort between the Best Practices and Learning Committees.\nAims:\n\nTo create a continual support space that anyone can access\nTo learn how to code and how to code better\nTo upskill people from a distance, ultimately improving all our abilities in:\n\ndata handling, presentation and analysis\nexperimental design\nquantitative understanding\ncoding and problem solving\ntransmission modelling\n\nTo collaborate better and more equitably\n\nStructure:\n\nA theme is selected by the committee\nExperts sign up to support specific themed areas\nA participant submits a coding related problem for consideration within a specific theme\nExperts select 2 – 3 problems per session on the chosen theme, and prepare some solutions to present\n\nExperts will work with the Hackathon Committee for a half a day to consider the problems submitted and draft solutions. Once solutions are ready for a hackathon audience, they will present these during a 2-hour training session. Once the 2-hour training session concludes, experts will summarize the session, adapt solutions, and upload them to the shared space. A recording of the training will also be provided.\nIf you are an expert in the following topic areas, we need your help!\n\nData handling\nVisualisation \nDescriptive statistics\nPower calculations\nRegression statistics\nMechanistic modelling\nBayesian statistics\n\nWhy volunteer as an expert? The best way to learn is to teach. You’ll also have an opportunity to network and gain professional visibility within the AMMnet community.\nTo volunteer as an expert, please complete the form at the link here."
  },
  {
    "objectID": "posts/data-vis/index.html",
    "href": "posts/data-vis/index.html",
    "title": "Live Session 1: Introduction to Data Visualization in R",
    "section": "",
    "text": "This tutorial introduces you to data visualization in R. We will learn how to develop an understanding of our data before visualization, making quick exploratory visualizations using base R functions, and creating various plots using the ggplot2 package. You’ll learn how to customize and enhance your visualizations for clear data communication. By the end, you’ll have the skills to create plots to effectively present your data insights."
  },
  {
    "objectID": "posts/data-vis/index.html#getting-started",
    "href": "posts/data-vis/index.html#getting-started",
    "title": "Live Session 1: Introduction to Data Visualization in R",
    "section": "Getting Started",
    "text": "Getting Started\nBefore you begin, you might want to create a new project in RStudio. This can be done by clicking on the “New Project” button in the upper right corner of the RStudio window. You can then name the project and choose a directory to save it in.\nNext, we will load the tidyverse package. This package provides a set of useful functions for data manipulation and visualization. We will use the ggplot2 package to create plots in the later section of this tutorial.\n\n# load packages\nlibrary(tidyverse)\n\nNext, let’s download the two example datasets we will use in this tutorial. These are avialable in the AMMnet Hackathon GitHub repository.\nI suggest creating a data folder inside your R project, then we can download the two example datasets so that they are saved to your computer.\n\n# Create a data folder\ndir.create(\"data\")\n\n# Download example data\nurl &lt;- \"https://raw.githubusercontent.com/AMMnet/AMMnet-Hackathon/main/01_data-vis/data/\"\n\ndownload.file(paste0(url, \"mockdata_cases.csv\"), destfile = \"data/mockdata_cases.csv\")\ndownload.file(paste0(url, \"mosq_mock.csv\"), destfile = \"data/mosq_mock.csv\")\n\n# Load example data\nmalaria_data   &lt;- read_csv(\"data/mockdata_cases.csv\")\nmosquito_data  &lt;- read_csv(\"data/mosq_mock.csv\")\n\nThe two datasets we will use are mockdata_cases.csv and mosq_mock.csv, which are mock example datasets that should be similar to malaria case surviellance and mosquito field collection data, respectively. In the following sections we will use the mockdata_cases.csv to introduce concepts of data visualization in R. The mosq_mock.csv dataset is used in the challenge sections."
  },
  {
    "objectID": "posts/data-vis/index.html#characterizing-our-data",
    "href": "posts/data-vis/index.html#characterizing-our-data",
    "title": "Live Session 1: Introduction to Data Visualization in R",
    "section": "Characterizing our data",
    "text": "Characterizing our data\nBefore we start visualizing our data, we need to understand the characteristics of our data. The goal is to get an idea of the data structure and to understand the relationships between variables.\nHere are some functions that can help us understand the structure of our data:\n\n# Explore the structure and summary of the datasets\ndim(malaria_data)  \nhead(malaria_data)\nsummary(malaria_data)\n\nWe should also explore individual columns/variables\n\nmalaria_data$location          # values for a single column\nunique(malaria_data$location)  # unique values for a single column\ntable(malaria_data$location)   # frequencies for a single column\ntable(malaria_data$location, malaria_data$ages)  # frequencies for multiple columns\n\nFinally, we should check for missing values in each column, as these can affect our visualizations.\n\nsum(is.na(malaria_data))\n\n[1] 0\n\n\n\n\n\n\n\n\nChallenge 1: Explore the structure and summary of the mosquito_data dataset\n\n\n\n\nWhat are the dimensions of the dataset?\nWhat are the column names?\nWhat are the column types?\nWhat are some key variables or relationships that we can explore?"
  },
  {
    "objectID": "posts/data-vis/index.html#exploratory-visualizations-using-base-r-functions",
    "href": "posts/data-vis/index.html#exploratory-visualizations-using-base-r-functions",
    "title": "Live Session 1: Introduction to Data Visualization in R",
    "section": "Exploratory Visualizations Using Base R Functions",
    "text": "Exploratory Visualizations Using Base R Functions\nFirst, we will look at some exploratory data visualization techniques using base R functions. The purpose of these plots is to help us understand the relationships between variables and characteristics of our data. They are useful for quickly exploring the data and understanding the relationships, but they are not are not great for sharing in scientific publications/presentations.\n\nSingle variable comparison\nFor one variable comparison, we can use hist() function to create a histogram.\n\nhist(malaria_data$prev)\n\n\n\n\n\n\n\nhist(malaria_data$prev, \n    breaks = 10, \n    main = \"Distribution of Malaria Prevalence\",\n    xlab = \"Malaria Prevalence\",\n    ylab = \"Frequency\",\n    col = \"lightblue\",\n    border = \"black\")\n\n\n\n\n\n\n\n\nAnnother useful function for single variable comparisons is barplot(). In this case, we will use the table() function to count the number of observations in each category, then use barplot() to create a barplot.\n\nbarplot(table(malaria_data$ages))\n\n\n\n\n\n\n\nbarplot(table(malaria_data$location))\n\n\n\n\n\n\n\nbarplot(table(malaria_data$year))\n\n\n\n\n\n\n\n\n\n\nMultiple variables\nFor multiple variables, we can use plot() function to create a scatterplot. In this case, we will use the S operator to pull out an individual column from the dataset. Then we will use plot() to create a scatterplot. The first argument in plot() is the x variable, and the second argument is the y variable.\n\nplot(malaria_data$total, malaria_data$positive)\n\n\n\n\n\n\n\nplot(malaria_data$month, malaria_data$prev)\n\n\n\n\n\n\n\n\nWe can also create boxplots by using boxplot() function. In this function we use the ~ operator, which tells R to use the values on the lefthand side of the ~ as the x variable and the righthand side of the ~ as the y variable. I think of ~ as “in terms of”, and for boxplots this means that your numerical variable will be on the x axis and the categorical variable will be on the y axis.\n\nboxplot(malaria_data$prev ~ malaria_data$month) \n\n\n\n\n\n\n\nboxplot(malaria_data$prev ~ malaria_data$location) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChallenge 2: Explore the structure and summary of the mosquito_data dataset\n\n\n\n\nAre their any interesting patterns in individual variables/columns?\nAre there any relationships between variables/columns?"
  },
  {
    "objectID": "posts/data-vis/index.html#data-visualization-with-ggplot2",
    "href": "posts/data-vis/index.html#data-visualization-with-ggplot2",
    "title": "Live Session 1: Introduction to Data Visualization in R",
    "section": "Data Visualization with ggplot2",
    "text": "Data Visualization with ggplot2\nBase R functions like hist() and barplot() are great for quickly exploring our data, but we may want to use more powerful visualization techniques when preparing outputs for scientific reports, presentations, and publications.\nThe ggplot2 package is a popular visualization package for R. It provides an easy-to-use interface for creating data visualizations. The ggplot2 package is based on the “grammar of graphics” and is a powerful way to create complex visualizations that are useful for creating scientific and publication-quality figures.\nThe “grammar of graphics” used in ggplot2 is a set of rules that are used to develop data visualizations using a layering approach. Layers are added using the ‘+’ operator.\n\nComponents of a ggplot\nThere are three main components of a ggplot: 1. The data: the dataset we want to visualize 2. The aesthetics: the visual properties from the data used in the plot 3. The geometries: the visual representations of the data (e.g., points, lines, bars)\n\nThe data\nAll ggplot2 plots require a data frame as input. Just running this line will produce a blank plot because we have stated which elements from the data we want to visualize or how we want to visualize them.\n\nggplot(data = malaria_data) \n\n\n\n\n\n\n\n\n\n\nThe aesthetics\nNext, we need to specify the visual properties of the plot that are determined by the data. The aesthetics are specified using the aes() function. The output should now produce a blank plot but with determined visual properties (e.g., axes labels).\n\nggplot(data = malaria_data, aes(x = total, y = positive)) \n\n\n\n\n\n\n\n\n\n\nThe geometries\nFinally, we need to specify the visual representation of the data. The geometries are specified using the geom_* function. There are many different types of geometries that can be used in ggplot2. We will use geom_point() in this example and we will append it to the previous plot using the + operator. The output should now produce a plot with the specified visual representation of the data.\n\nggplot(data = malaria_data, aes(x = total, y = positive)) + geom_point()\n\n\n\n\n\n\n\n\nHere are some examples of different geom functions:\n\nggplot(data = malaria_data, aes(x = prev)) +\n  geom_histogram(bins = 20)  # the \"bins\" argument specifies the number of bars\n\n\n\n\n\n\n\nggplot(data = malaria_data, aes(x = year)) +\n  geom_bar(fill = \"tomato\")  # the \"fill\" argument specifies the color of the bars\n\n\n\n\n\n\n\nggplot(data = malaria_data, aes(x = location, y = prev)) +\n  geom_boxplot() +\n  geom_jitter(alpha = 0.2)  # geom_jitter adds jittered points to the plot, and \n\n\n\n\n\n\n\n                            # the \"alpha\" argument specifies the transparency\n\nggplot(data = malaria_data, aes(x = location, y = prev)) +\n  geom_violin() +          # Violin plot are similar to boxplots, but illustrate \n  geom_jitter(alpha = 0.2) # the distribution of the data\n\n\n\n\n\n\n\nggplot(data = malaria_data, aes(x = total, y = positive)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")  # The smooth geom add a smoothed line to the plot, \n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n                              # using the \"lm\" or other methods\n\n\n\n\nExtending the aesthetics\nAdditional visual properties, such as color, size, and shape, can be defined from our input data using the aes() function. Here is an example of adding color to a previous plot using the color aesthetic.\n\nggplot(data = malaria_data, aes(x = total, y = positive, color = location)) +\n  geom_point()\n\n\n\n\n\n\n\n\nNote that this is different then defining a color directly within the geom_point(), which would only apply a single color to all points.\n\nggplot(data = malaria_data, aes(x = total, y = positive)) +\n  geom_point(color = \"tomato\")\n\n\n\n\n\n\n\n\nWhen using the aes() function, the visual properties will be determined by a variable in the dataset. This allows us to visualize relationships between multiple variables at the same time.\n\nggplot(data = malaria_data, aes(x = prev, fill = ages)) +\n  geom_histogram(color = \"black\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nggplot(data = malaria_data, aes(x = location, y = prev, fill = location)) +\n  geom_boxplot() +\n  geom_jitter(alpha = 0.2)\n\n\n\n\n\n\n\nggplot(data = malaria_data, aes(x = total, y = positive, color = location), alpha = 0.5) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nggplot(data = malaria_data, aes(x = xcoord, y = ycoord, color = location)) +\n  geom_point(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChallenge 3: Create ggplot2 visualizations of the ‘mosquito_data’ dataset\n\n\n\n\nAre their any interesting patterns in individual variables/columns?\nHow can we use the aes() function to view multiple variables in a single plot?\nAre there any additional geometries that may be useful for visualizing this dataset?"
  },
  {
    "objectID": "posts/data-vis/index.html#customizing-ggplot-graphics-for-presentation-and-communication",
    "href": "posts/data-vis/index.html#customizing-ggplot-graphics-for-presentation-and-communication",
    "title": "Live Session 1: Introduction to Data Visualization in R",
    "section": "Customizing ggplot Graphics for Presentation and Communication",
    "text": "Customizing ggplot Graphics for Presentation and Communication\nIn this section, we will using additional features of ggplot2 to customize and develop high-quality plots that can used in scientific publications and presentations.\n\nThemes\nThere are many different themes that can be used in ggplot2. The “theme” function is used to specify the theme of the plot. There are many preset theme functions, and further custom themes can be created using the generic theme() function.\nTypically you will want to set the theme at the end of your plot.\n\nggplot(data = malaria_data, aes(x = location, y = prev, fill = location)) +\n  geom_boxplot() +\n  geom_jitter(alpha = 0.2) +\n  theme_classic()\n\n\n\n\n\n\n\nggplot(data = malaria_data, aes(x = location, y = prev, fill = location)) +\n  geom_boxplot() +\n  geom_jitter(alpha = 0.2) +\n  theme_bw()\n\n\n\n\n\n\n\nggplot(data = malaria_data, aes(x = location, y = prev, fill = ages)) +\n  geom_boxplot() +\n  geom_jitter(alpha = 0.2) +\n  theme_classic() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n\n\nLabels\nLabels can be added to various components of a plot using the labs() function.\n\nggplot(data = malaria_data, aes(x = location, y = prev, fill = ages)) +\n  geom_boxplot() +\n  geom_jitter(alpha = 0.2) +\n  labs(title = \"Malaria prevalence by location and age group\",\n       subtitle = \"Data from 2018 - 2020\",\n       x = \"Location\",\n       y = \"Prevalence\",\n       fill = \"Age group\") +\n  theme_classic() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n### Custom color palettes\nThere are many different color palettes that can be used in ggplot2. The “scale_color” function is used to specify the color of the plot. There are many preset color palettes, and further custom color palettes can be created using the generic scale_color() function.\n\nggplot(data = malaria_data, aes(x = location, y = prev, fill = location)) +\n  geom_boxplot() +\n  geom_jitter(alpha = 0.2) +\n  scale_fill_brewer(palette = \"Set1\")\n\n\n\n\n\n\n\n\nWe can also set our own colors.\n\nggplot(data = malaria_data, aes(x = location, y = prev, fill = location)) +\n  geom_boxplot() +\n  geom_jitter(alpha = 0.2) +\n  scale_fill_manual(values = c(\"#C6E0FF\", \"#136F63\", \"#E0CA3C\", \"#F34213\", \"#3E2F5B\"))\n\n\n\n\n\n\n\n\nThe examples above show how to use colors for categorical variables, but we can also use custom color palettes for continuous variables.\n\nggplot(data = malaria_data, aes(x = total, y = positive, color = prev)) +\n  geom_point() +\n  scale_color_gradient(low = \"blue\", high = \"red\")\n\n\n\n\n\n\n\nggplot(data = malaria_data, aes(x = total, y = positive, color = prev)) +\n  geom_point() +\n  # use viridis package to create custom color palettes\n  scale_color_viridis_c(option = \"magma\")  \n\n\n\n\n\n\n\n\n\n\nFacets\nFacets are a powerful feature of ggplot2 that allow us to create multiple plots based on a single variable. This “small multiple” approach is another effective way to visualize relationships between mutliple variables.\nFacets also make use of the ~ operator.\n\nggplot(data = malaria_data, aes(x = total, y = positive, color = prev)) +\n  geom_point() +\n  scale_color_viridis_c(option = \"magma\") +\n  facet_wrap(~ location)\n\n\n\n\n\n\n\nggplot(data = malaria_data, aes(x = location, y = prev, fill = location)) +\n  geom_boxplot() +\n  geom_jitter(alpha = 0.2) +\n  facet_wrap(~ ages) +\n  coord_flip() +  # flips the x and y axes\n  scale_fill_manual(\n    values = c(\"#C6E0FF\", \"#136F63\", \"#E0CA3C\", \"#F34213\", \"#3E2F5B\")) +\n  labs(title = \"Malaria prevalence by location and age group\",\n       subtitle = \"Data from 2018 - 2020\",\n       x = \"Location\",\n       y = \"Prevalence\",\n       fill = \"Age group\") +\ntheme_classic()\n\n\n\n\n\n\n\nggplot(data = malaria_data, aes(x = prev, fill = ages)) +\n  geom_histogram(bins = 10) +\n  scale_fill_viridis_d() +\n  facet_grid(year ~ .)\n\n\n\n\n\n\n\n\n\n\nExporting plots\nWe can export plots to a variety of formats using the ggsave() function. We can specify which plot to export by saving in an object and then calling the object in the ggsave() function, otherwise ggsave() will save the current/last plot. The width and height of the output image using the width and height can be set using the width and height arguments, and the resolution of the image using the dpi argument.\nThe file type can be set using the format argument, or by using a specific file extension. I recommend using informative names for the output file so that it is easily identifiable.\n\nggplot(data = malaria_data, aes(x = location, y = prev, fill = location)) +\n  geom_boxplot() +\n  geom_jitter(alpha = 0.2) +\n  facet_wrap(~ ages) +\n  coord_flip() +  # flips the x and y axes\n  scale_fill_manual(values = c(\"#C6E0FF\", \"#136F63\", \"#E0CA3C\", \"#F34213\", \"#3E2F5B\")) +\n  labs(title = \"Malaria prevalence by location and age group\",\n       subtitle = \"Data from 2018 - 2020\",\n       x = \"Location\",\n       y = \"Prevalence\",\n       fill = \"Age group\") +\ntheme_classic()\n\nggsave(\"malaria-prevalence-age-boxplot.png\", width = 10, height = 6, dpi = 300)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChallenge 4: Develop customized ggplot figures for the ‘mosquito_data’ dataset\n\n\n\n\nTest customs themes on your previous plots, consider looking for new packages with more themes\nApply custom color palettes to your plots, explore additional color palettes and packages\nUse facets to visualize relationships between multiple variables"
  },
  {
    "objectID": "posts/data-vis/index.html#final-challenges",
    "href": "posts/data-vis/index.html#final-challenges",
    "title": "Live Session 1: Introduction to Data Visualization in R",
    "section": "Final Challenges",
    "text": "Final Challenges\nCHALLENGE 1: Create a figure showing how the Anopheles gambiae total counts vary each day and by location.\nCHALLENGE 2: Create a figure showing the hourly Anopheles gambiae total counts each hour."
  }
]